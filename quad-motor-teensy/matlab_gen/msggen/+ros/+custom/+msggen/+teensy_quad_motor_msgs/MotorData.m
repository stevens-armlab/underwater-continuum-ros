classdef MotorData < ros.Message
    %MotorData MATLAB implementation of teensy_quad_motor_msgs/MotorData
    %   This class was automatically generated by
    %   ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2020 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'teensy_quad_motor_msgs/MotorData' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '079052e9b08f61444a62f46645d347e9' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        Position
        Velocity
        Torque
        Mode
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Mode', 'Position', 'Torque', 'Velocity'} % List of non-constant message properties
        ROSPropertyList = {'mode', 'position', 'torque', 'velocity'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = MotorData(msg)
            %MotorData Construct the message object MotorData
            import com.mathworks.toolbox.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('ros:mlros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('ros:mlros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('ros:mlros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function position = get.Position(obj)
            %get.Position Get the value for property Position
            position = single(obj.JavaMessage.getPosition);
        end
        
        function set.Position(obj, position)
            %set.Position Set the value for property Position
            validateattributes(position, {'numeric'}, {'nonempty', 'scalar'}, 'MotorData', 'Position');
            
            obj.JavaMessage.setPosition(position);
        end
        
        function velocity = get.Velocity(obj)
            %get.Velocity Get the value for property Velocity
            velocity = single(obj.JavaMessage.getVelocity);
        end
        
        function set.Velocity(obj, velocity)
            %set.Velocity Set the value for property Velocity
            validateattributes(velocity, {'numeric'}, {'nonempty', 'scalar'}, 'MotorData', 'Velocity');
            
            obj.JavaMessage.setVelocity(velocity);
        end
        
        function torque = get.Torque(obj)
            %get.Torque Get the value for property Torque
            torque = single(obj.JavaMessage.getTorque);
        end
        
        function set.Torque(obj, torque)
            %set.Torque Set the value for property Torque
            validateattributes(torque, {'numeric'}, {'nonempty', 'scalar'}, 'MotorData', 'Torque');
            
            obj.JavaMessage.setTorque(torque);
        end
        
        function mode = get.Mode(obj)
            %get.Mode Get the value for property Mode
            mode = int32(obj.JavaMessage.getMode);
        end
        
        function set.Mode(obj, mode)
            %set.Mode Set the value for property Mode
            validateattributes(mode, {'numeric'}, {'nonempty', 'scalar'}, 'MotorData', 'Mode');
            
            obj.JavaMessage.setMode(mode);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Position = obj.Position;
            cpObj.Velocity = obj.Velocity;
            cpObj.Torque = obj.Torque;
            cpObj.Mode = obj.Mode;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Position = strObj.Position;
            obj.Velocity = strObj.Velocity;
            obj.Torque = strObj.Torque;
            obj.Mode = strObj.Mode;
        end
    end
    
    methods (Access = ?ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Position = obj.Position;
            strObj.Velocity = obj.Velocity;
            strObj.Torque = obj.Torque;
            strObj.Mode = obj.Mode;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.custom.msggen.teensy_quad_motor_msgs.MotorData.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = ros.custom.msggen.teensy_quad_motor_msgs.MotorData;
            obj.reload(strObj);
        end
    end
end
